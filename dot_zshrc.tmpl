# -- INIT ---------------------------------------------------------------------

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# -- ZINIT --------------------------------------------------------------------

if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit


# # Load a few important annexes, without Turbo
# # (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

# -- PLUGINS ------------------------------------------------------------------


zinit ice depth=1
zinit light romkatv/powerlevel10k

_zshrc_after_load() {
  eval "$(aactivator init)"
  eval "$(fzf --zsh)"
  {{- if eq .chezmoi.hostname "Puzzel-PF3M3GAA" }}
  source <(kubectl completion zsh)
  {{- end }}
}

zinit wait lucid light-mode for \
  Aloxaf/fzf-tab \
  atload'_zsh_autosuggest_start;
  unset ZSH_AUTOSUGGEST_USE_ASYNC;
  bindkey -v "^ " autosuggest-accept' \
    zsh-users/zsh-autosuggestions \
  blockf atpull'zinit creinstall -q .' \
    zsh-users/zsh-completions \
  softmoth/zsh-vim-mode \
  hlissner/zsh-autopair \
  urbainvaes/fzf-marks \
  OMZL::git.zsh \
  atload"unalias grv" OMZP::git/git.plugin.zsh \
  ael-code/zsh-colored-man-pages \
  OMZL::functions.zsh \
  OMZP::sudo \
  OMZP::web-search \
  OMZP::copypath \
  OMZP::copyfile \
  OMZP::dirhistory \
  OMZP::jsontools \
  kutsan/zsh-system-clipboard \
  atinit'zicompinit;
  zicdreplay;
  _zshrc_after_load' \
    zdharma-continuum/fast-syntax-highlighting \

# -- SETTINGS -----------------------------------------------------------------

HISTSIZE=50000
SAVEHIST=10000
HISTFILE=~/.cache/zsh/history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt share_history
setopt nobeep

# -- ALIASES ------------------------------------------------------------------

alias cd="z"
alias zz="z -"
alias ls="eza --icons=always --hyperlink"
alias la="eza -a --icons=always --hyperlink"
alias ll="eza -l --hyperlink"
alias zshconf="chezmoi edit ~/.zshrc --apply"
alias tml="tmux list-sessions"
alias tma="tmux attach -t"
alias py="python"
alias ipy="ipython"
alias fgrep="fgrep --color"
alias egrep="egrep --color"
alias rg="rg --hyperlink-format=kitty"
alias tree="tree --hyperlink"
alias r="radian"
alias lg="lazygit"
alias fp="fzf-tmux -p -w 90% -h 90% -- --preview \
  'bat --theme Nord --style=numbers --color=always --line-range :500 {}'"
alias cm="chezmoi"
alias lgcm="lg -g '$(chezmoi source-path)/.git' -w '$(chezmoi source-path)'"
{{- if eq .chezmoi.hostname "Puzzel-PF3M3GAA" }}
alias remount="sudo mount -a"
alias decolerize="sed -u 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g'"
alias bslogs="prodlogs botstudio"
alias nvide="'/mnt/c/Program Files/Neovide/neovide.exe' --"
alias k="kubectl"
alias kgp="kubectl get pods"
alias kex="kubectl exec -it"
{{- else }}
alias coa="conda activate"
alias cod="conda deactivate"
{{- end }}
{{ if eq .chezmoi.os "darwin" }}
alias ipyk="ipython3 -i -c \"import sys;sys.path.append('$LUNARVIM_RUNTIME_DIR/site/pack/packer/opt/vim-jukit/helpers');import matplotlib;import matplotlib.pyplot as plt;matplotlib.use('module://matplotlib-backend-kitty');plt.show.__annotations__['save_dpi'] = 150;import matplotlib.pyplot as plt;plt.style.use('$LUNARVIM_RUNTIME_DIR/site/pack/packer/opt/vim-jukit/helpers/matplotlib-backend-kitty/backend.mplstyle')\""
alias icat="kitty +kitten icat"
{{ end }}

# -- PLUGIN CONFIG ------------------------------------------------------------

# VI MODE

bindkey -M viins 'jk' vi-cmd-mode
MODE_CURSOR_VIINS="#d8dee9 steady bar"
MODE_CURSOR_REPLACE="$MODE_CURSOR_VIINS #ff0000"
MODE_CURSOR_VICMD="white block"
MODE_CURSOR_SEARCH="#ff00ff steady underline"
MODE_CURSOR_VISUAL="$MODE_CURSOR_VICMD steady block"
MODE_CURSOR_VLINE="$MODE_CURSOR_VISUAL #00ffff"

# FZF

alias fzf="fzf-tmux -p 70%"

export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS
  --height 40% --layout=reverse --border --cycle --info=inline --ansi
  --bind=ctrl-d:preview-page-down
  --bind=ctrl-u:preview-page-up"

local FZF_COLORS='--color=fg:#e5e9f0,bg:#2d3441,hl:#81a1c1,fg+:#e5e9f0,bg+:#2d3441,hl+:#81a1c1,info:#eacb8a,prompt:#bf6069,pointer:#b48dac,marker:#a3be8b,spinner:#b48dac,header:#a3be8b'

export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS"
  $FZF_COLORS"

export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type d --hidden --follow --exclude .git"
export FZF_ALT_C_OPTS="--preview 'tree -L 1 -C --dirsfirst {} | head -200'"
export FZF_TMUX_OPTS="-p 70%"

# Use fd for fuzzy completion
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

# MISCELLANIOUS

zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
export ZSH_SYSTEM_CLIPBOARD_TMUX_SUPPORT="true"
export ZSH_SYSTEM_CLIPBOARD_METHOD="pb"
export BAT_THEME="Nord"
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#bddedc"
export LS_COLORS=$(echo "$(vivid generate nord):*.plist=0;38;2;180;142;173:*.cson=0;38;2;180;142;173:\
  *.Rmd=0;38;2;180;142;173:*.tsv=0;38;2;180;142;173" | sed 's/ //g')

# FZF-TAB

zstyle ':fzf-tab:*' fzf-command fzf-tmux
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':fzf-tab:complete:*' fzf-flags -p 50%,50% "$FZF_COLORS"
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'tree -L 1 -C --dirsfirst $realpath | head -200'
zstyle ':fzf-tab:complete:cd:*' fzf-flags -p 70%,50% "$FZF_COLORS"
zstyle ':fzf-tab:complete:z:*' fzf-preview 'tree -L 1 -C --dirsfirst $realpath | head -200'
zstyle ':fzf-tab:complete:z:*' fzf-flags -p 70%,50% "$FZF_COLORS"
zstyle ':fzf-tab:*' fzf-bindings 'space:accept'
zstyle ':fzf-tab:*' switch-group ',' '.'
zstyle ':fzf-tab:complete:git-(add|diff|restore):*' fzf-preview \
	'git diff $word | delta'
zstyle ':fzf-tab:complete:git-(add|diff|restore):*' fzf-flags -p 90%,90% --preview-window=right:70% "$FZF_COLORS"
zstyle ':fzf-tab:complete:nvim:*' fzf-preview \
  'bat --theme Nord --style=numbers --color=always --line-range :500 $realpath'
zstyle ':fzf-tab:complete:nvim:*' fzf-flags -p 70%,70% "$FZF_COLORS"

# -- OS SPECIFIC --------------------------------------------------------------
{{ if eq .chezmoi.os "darwin" }}
# -- PERL ---------------------------------------------------------------------

PATH="/Users/gustavkristensen/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/Users/gustavkristensen/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/Users/gustavkristensen/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/Users/gustavkristensen/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/gustavkristensen/perl5"; export PERL_MM_OPT;
# export CMAKE_INCLUDE_PATH="/opt/homebrew/opt/flex/include"
# export CMAKE_LIBRARY_PATH="/opt/homebrew/opt/flex/lib;/opt/homebrew/opt/bison/lib"
# export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
# export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
export JAVA_HOME=/Library/Java/JavaVirtualMachines/openjdk-21.jdk/Contents/Home
# export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
# export PATH="/opt/homebrew/opt/flex/bin:/opt/homebrew/opt/bison/bin:$PATH"
alias grep="ggrep --color"
alias find="gfind"
alias sed="gsed"
alias xargs="gxargs"
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
export GOKU_EDN_CONFIG_FILE="$XDG_CONFIG_HOME/karabiner/karabiner.edn"
if [[ ! -f $XDG_DATA_HOME/yabai/padding.txt ]]; then
  mkdir -p $XDG_DATA_HOME/yabai
  echo 8 > $XDG_DATA_HOME/yabai/padding.txt
fi

{{ else if eq (substr 0 6 (env "WSL_DISTRO_NAME")) "Ubuntu" }}
alias grep="grep --color"
alias pbcopy="clip.exe"
alias pbpaste="powershell.exe -command 'Get-Clipboard'"
{{ end }}

# -- ADDITIONAL SETTINGS -------------------------------------------------------

if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

  autoload -Uz compinit
  compinit
fi

# -- FUNCTIONS ----------------------------------------------------------------

# Go up n directories

.. () {
  target='..'
  if [[ $# -gt 0 ]]; then
    for i in {2.."$1"}; do
      target="$target/.."
    done
  fi
  \cd "$target"
}

_cmedit() {
  $HOME/.local/bin/cmedit
}
zle -N _cmedit
bindkey "^O" _cmedit

{{ if eq .chezmoi.hostname "Puzzel-PF3M3GAA" }}
_kubectl_get_resource_fzf () {
  echo $(kubectl get "$1" | fzf -q "$2" -0 -1 --header-lines 1 --accept-nth 1 --nth 1)
}

ksw () {
  namespace=$(echo "default\ndev01-dev" | fzf -q "$1" -0 -1)
  case $namespace in
    default)
      kubectl config use rancher-desktop && kubectl config set-context --current --namespace="$namespace"
      ;;

    dev01-dev)
      kubectl config use aks01-dev && kubectl config set-context --current --namespace="$namespace"
      ;;

  esac
}

kcu () {
  local config=$(kubectl config get-contexts | fzf -q "$1" -0 -1 --header-lines 1 --with-nth 2,3,5 --accept-nth 1 --nth 1)
  if [[ -z "$config" ]] then
    return 1
  fi
  kubectl config use "$config"
}

kns () {
  local namespace=$(_kubectl_get_resource_fzf namespace "$1")
  if [[ -z "$namespace" ]] then
    return 1
  fi
  kubectl config set-context --current --namespace="$namespace"
}

kx () {
  local POD=$(_kubectl_get_resource_fzf pod "$1")
  if [[ -z "$POD" ]] then
    return 1
  fi
  local ARGS=$#
  shift
  kubectl exec -it "$POD" -- ${@:-bash}
}

kd () {
  local POD=$(_kubectl_get_resource_fzf pod "$1")
  if [[ -z "$POD" ]] then
    return 1
  fi
  kubectl delete pod "$POD"
}

kl () {
  local POD=$(_kubectl_get_resource_fzf pod "$1")
  if [[ -z "$POD" ]] then
    return 1
  fi
  local ARGS=$#
  shift
  kubectl logs "$POD" $@
}

bsh () {
  local POD=$(_kubectl_get_resource_fzf pod "'botstudio-celery-default'")
  expect -c "eval spawn kubectl exec $POD -it -- python manage.py shell
  send \"from botstudio.models import Bot, ChatbotLog, NodeLabelItem\nfrom pprint import pprint\n\"
  interact"
}

# FIXME: This is a hack needed for rancher desktop, hopefully a better fix is found
clean_docker_config() {
    CONFIG_FILE="$HOME/.docker/config.json"
    if [[ -f "$CONFIG_FILE" ]]; then
        jq 'del(.credsStore)' "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
    fi
}
clean_docker_config

# Drop cache
dropcache () {
  sync; sudo sh -c "echo $1 > /proc/sys/vm/drop_caches"
}

# fpath=( ~/.zsh_functions "${fpath[@]}" )
# autoload -Uz ${fpath[1]}/*(.:t)
{{- end }}

# Rich print of file with less
richer () {
  rich "$@" --force-terminal | less -R
}

# Count files/dirs in directory (depth 1)
count () {
  local DIR=${1:?"Directory to count must be specified."}
  find $DIR ! -name $DIR -prune -print | grep -c /
}

# Count all files/dirs in directory and subdirectories
countall () {
  local DIR=${1:?"Directory to count must be specified."}
  find $DIR//. ! -name . | grep -c //
}

# Change tmux session wd
tmux-cwd () {
    tmux command-prompt -I $PWD -p "New session dir:" "attach -c %1"
 }

# fe [FUZZY PATTERN] - Open the selected file with the default editor
fe() {
  IFS=$'\n' files=($(fzf-tmux -p -w 90% -h 90% -- --query="$1" --multi --select-1 --exit-0 --preview 'bat --theme Nord --style=numbers --color=always --line-range :500 {}'))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

{{ if eq .chezmoi.os "darwin" }}
# Set yabai padding
ypad() {
  yabai -m config top_padding $1
  yabai -m config bottom_padding $1
  yabai -m config left_padding $1
  yabai -m config right_padding $1
  yabai -m config window_gap $1
  echo $1 > $XDG_DATA_HOME/yabai/padding.txt
  ~/.config/yabai/scripts/refresh.sh
}
{{ end }}

{{- if eq .chezmoi.os "darwin" }}
# -- CONDA --------------------------------------------------------------------

__conda_setup="$('/Users/gustavkristensen/mambaforge/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/gustavkristensen/mambaforge/etc/profile.d/conda.sh" ]; then
# . "/Users/gustavkristensen/mambaforge/etc/profile.d/conda.sh"  # commented out by conda initialize
    else
# export PATH="/Users/gustavkristensen/mambaforge/bin:$PATH"  # commented out by conda initialize
    fi
fi
unset __conda_setup

if [ -f "/Users/gustavkristensen/mambaforge/etc/profile.d/mamba.sh" ]; then
    . "/Users/gustavkristensen/mambaforge/etc/profile.d/mamba.sh"
fi

if [[ $TMUX ]]; then
    conda deactivate
    conda activate base
fi
{{- else if and (eq (substr 0 6 (env "WSL_DISTRO_NAME")) "Ubuntu") (eq .chezmoi.hostname "Gustav-PC") }}
# -- CONDA --------------------------------------------------------------------

__conda_setup="$('/home/gustav/mambaforge/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/gustav/mambaforge/etc/profile.d/conda.sh" ]; then
        . "/home/gustav/mambaforge/etc/profile.d/conda.sh"
    else
        export PATH="/home/gustav/mambaforge/bin:$PATH"
    fi
fi
unset __conda_setup

if [ -f "/home/gustav/mambaforge/etc/profile.d/mamba.sh" ]; then
    . "/home/gustav/mambaforge/etc/profile.d/mamba.sh"
fi

if [[ $TMUX ]]; then
    conda deactivate
    conda activate base
fi
{{- end }}

# -- SSH-AGENT ----------------------------------------------------------------

SSH_ENV=$HOME/.ssh/environment

# start the ssh-agent
function start_agent {
    # spawn ssh-agent
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
}

if [ -f "${SSH_ENV}" ]; then
     . "${SSH_ENV}" > /dev/null
     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
    }
else
    start_agent;
fi

# -- MISC ---------------------------------------------------------------------

eval "$(zoxide init zsh)"

# -- FINAL --------------------------------------------------------------------

_set_title_cwd() {
  printf "\033]0;$PWD\007";
}

add-zsh-hook precmd _set_title_cwd

function osc7-pwd() {
    emulate -L zsh # also sets localoptions for us
    setopt extendedglob
    local LC_ALL=C
    printf '\e]7;file://%s%s\e\' $HOST ${PWD//(#m)([^@-Za-z&-;_~])/%${(l:2::0:)$(([##16]#MATCH))}}
}

function chpwd-osc7-pwd() {
    (( ZSH_SUBSHELL )) || osc7-pwd
}
add-zsh-hook -Uz chpwd chpwd-osc7-pwd

[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
